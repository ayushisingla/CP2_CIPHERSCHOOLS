/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
  public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0)
        {
            return null;
        }
       return helper(lists, 0 ,lists.length-1);
    }
    
    public ListNode helper(ListNode[] lists, int start, int end)
    {
        if(start == end)
        {
            return lists[start];
        }
        
        int mid = (end+start)/2;
        
        ListNode left = helper(lists, start, mid);
        ListNode right = helper(lists, mid+1, end);

        return merge(left,right);
    }
    
    public ListNode merge(ListNode l1, ListNode l2)
    {
        if(l1==null){
            return l2;
        }else if(l2==null){
            return l1;
        }
        
        ListNode prev = new ListNode(0);
        ListNode res = prev;
        while(l1 != null || l2 != null)
        {
            if(l1==null)
            {
                prev.next = l2;
                break;
            }else if(l2 == null){
                prev.next = l1;
                break;
            }
            
            int val1  = l1.val;
            int val2 = l2.val;
            
            ListNode temp = null;
            if(val1 < val2)
            {
                temp = new ListNode(val1);
                l1 = l1.next;
            }else{
                temp = new ListNode(val2);
                l2 = l2.next;
            }
            
            prev.next = temp;
            prev= prev.next;        
        }
        return res.next;
    }
}