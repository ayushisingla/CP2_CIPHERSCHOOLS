class Solution {
   
  private final int[][] directions = new int[][] { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };
  TrieNode root;
  Set<Integer> visited;

  public class TrieNode {
    private static final int N = 26;
    private TrieNode[] children;
    private boolean wordEnd = false;

    public TrieNode() {
      children = new TrieNode[N];
      wordEnd = false;
    }

    public void addChild(char c, TrieNode child) {
      children[c - 'a'] = child;
    }

    public TrieNode getChild(char c) {
      return children[c - 'a'];
    }

    public boolean hasChild(char c) {
      return children[c - 'a'] != null;
    }

    public void setWordEnd() {
      wordEnd = true;
    }

    public void unsetWordEnd() {
      wordEnd = false;
    }

    public boolean isWordEnd() {
      return this.wordEnd;
    }
  }

  private boolean hasPrefix(String prefix) {
    TrieNode node = root;
    for (int i = 0; i < prefix.length(); ++i) {
      char c = prefix.charAt(i);
      if (!node.hasChild(c)) {
        return false;
      }
      node = node.getChild(c);
    }
    return true;
  }

  private boolean hasWord(String prefix) {
    TrieNode node = root;
    for (int i = 0; i < prefix.length(); ++i) {
      char c = prefix.charAt(i);
      if (!node.hasChild(c)) {
        return false;
      }
      node = node.getChild(c);
    }
    return node.isWordEnd();
  }

  private void removeWord(String prefix) {
    TrieNode node = root;
    for (int i = 0; i < prefix.length(); ++i) {
      char c = prefix.charAt(i);
      if (!node.hasChild(c)) {
        return;
      }
      node = node.getChild(c);
    }
    node.unsetWordEnd();
  }

  private void findWordsHelper(char[][] board, List<String> res, StringBuilder sb, int[] position) {
    if (hasWord(sb.toString())) {
      res.add(sb.toString());
      removeWord(sb.toString());
    }

    for (int[] direction : directions) {
      int newX = position[0] + direction[0];
      int newY = position[1] + direction[1];
      int newD = newX * board[0].length + newY;

      if (newX >= 0 && newX < board.length && newY >= 0 && newY < board[0].length && !visited.contains(newD)) {
        String tmp = sb.toString() + board[newX][newY];
        if (hasPrefix(tmp)) {
          sb.append(board[newX][newY]);
          int oneD = newX * board[0].length + newY;
          visited.add(oneD);
          findWordsHelper(board, res, sb, new int[] { newX, newY });
          sb.deleteCharAt(sb.length() - 1);
          visited.remove(oneD);
        }
      }
    }
  }

  public List<String> findWords(char[][] board, String[] words) {
    List<String> res = new ArrayList<>();
    root = new TrieNode();
    TrieNode node = root;

    for (String word : words) {
      node = root;
      for (int i = 0; i < word.length(); ++i) {
        char c = word.charAt(i);
        if (!node.hasChild(c)) {
          node.addChild(c, new TrieNode());
        }
        node = node.getChild(c);
      }
      node.setWordEnd();
    }

    for (int i = 0; i < board.length; ++i) {
      for (int j = 0; j < board[0].length; ++j) {
        if (root.hasChild(board[i][j])) {
          StringBuilder sb = new StringBuilder();
          sb.append(board[i][j]);
          visited = new HashSet<>();
          visited.add(i * board[0].length + j);
          findWordsHelper(board, res, sb, new int[] { i, j });
        }
      }
    }

    return res;
  }
}