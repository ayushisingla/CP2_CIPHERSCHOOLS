//https://leetcode.com/problems/surrounded-regions/submissions/
//surrounded-regions

class Solution {
    boolean[][] marked;
    int m;
    int n;
    int[] dx = new int[]{-1, 1, 0, 0};
    int[] dy = new int[]{0, 0, -1, 1};
    
    public void solve(char[][] board) {
        m = board.length;
        if (m <= 2) return;
        n = board[0].length;
        if (n <= 2) return;
        
        marked = new boolean[m][n];
        for (int j = 0; j < n; j++){
            if (board[0][j] == 'O' && !marked[0][j]) dfs(board, 0, j);
            if (board[m-1][j] == 'O' && !marked[m-1][j]) dfs(board, m-1, j);
        }
        for (int i = 0; i < m; i++){
            if (board[i][0] == 'O' && !marked[i][0]) dfs(board, i, 0);
            if (board[i][n-1] == 'O' && !marked[i][n-1]) dfs(board, i, n-1);
        }
        for (int i = 1; i < m - 1; i++){
            for (int j = 1; j < n - 1; j++){
                if (board[i][j] == 'O' && !marked[i][j]) board[i][j] = 'X';
            }
        }
    }
    
    private void dfs(char[][] board, int r, int c){
        marked[r][c] = true;
        for (int i = 0; i < 4; i++){
            int x = r + dx[i];
            int y = c + dy[i];
            if (x >= 0 && x < m && y >= 0 && y < n && board[x][y] == 'O' && !marked[x][y]) dfs(board, x, y);
        }
    }
}