//https://leetcode.com/problems/shortest-path-in-binary-matrix/
//shortest-path-in-binary-matrix


class Solution {
    int[] xi = { 0, 1, -1, 0, 1, 1, -1, -1 };
    int[] yi = { 1, 0, 0, -1, 1, -1, 1, -1 };

    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid == null || grid.length == 0)
            return -1;
        int ans = 0;

        if (grid[0][0] != 0 || grid[grid.length - 1][grid[0].length - 1] != 0)
            return -1;

        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] { 0, 0 });
        grid[0][0] = 1;

        while (!queue.isEmpty()) {
            ans++;
            int size = queue.size();
            while (size-- > 0) {
                int[] t = queue.poll();
                if (t[0] == grid.length - 1 && t[1] == grid[0].length - 1)
                            return ans;
                for (int i = 0; i < 8; i++) {
                    int tx = t[0] + xi[i];
                    int ty = t[1] + yi[i];
                    if (isValid(grid, tx, ty) && grid[tx][ty] == 0) {
                        grid[tx][ty] = 1;
                        queue.offer(new int[] { tx, ty });
                    }
                }
            }
        }
        return -1;
    }

    public boolean isValid(int[][] grid, int x, int y) {
        return (x >= 0 && y >= 0 && x < grid.length && y < grid[0].length);
    }
}